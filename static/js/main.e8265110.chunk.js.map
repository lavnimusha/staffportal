{"version":3,"sources":["components/layout/Navbar.js","components/pages/Home.js","components/pages/Staff.js","components/auth/SigninWiget.js","components/auth/Login.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","type","data-toggle","data-target","id","Component","withAuth","state","authenticated","checkAuthentication","a","async","props","auth","isAuthenticated","setState","login","console","log","logout","this","mainContent","classNmae","onClick","clssName","Staff","currentUserName","currentUserEmail","idToken","JSON","parse","localStorage","getItem","claims","email","name","SignInWidget","el","ReactDOM","findDOMNode","widget","OktaSignIn","baseUrl","logo","authParams","pkce","renderEl","onSuccess","onError","remove","res","status","redirect","sessionToken","session","token","err","bind","pathname","onAuthRequired","history","push","App","issuer","clientId","redirectUri","window","location","origin","path","exact","component","Home","render","ImplicitCallback","Boolean","hostname","match","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8265110.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {Link} from 'react-router-dom';\n\n class Navbar extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark mb-4\">\n        <div className=\"container\">\n          <Link className=\"navbar-brand\" to=\"/\">\n            Acme Staff Portal\n          </Link>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/\">\n                  Home\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/staff\">\n                  Staff\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n        );\n    }\n}\nexport default Navbar;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withAuth } from '@okta/okta-react';\n\nexport default withAuth(class Home extends Component {\n  state = { authenticated: null };\n    \n  \n\n  checkAuthentication = async() => {\n    const authenticated = await this.props.auth.isAuthenticated();\n    if (authenticated !== this.state.authenticated) {\n      this.setState({ authenticated });\n    }\n  }\n\n  async componentDidMount() {\n    this.checkAuthentication();\n  }\n\n  async componentDidUpdate() {\n    this.checkAuthentication();\n  }\n\n  login = async() => {\n      console.log(this.props);\n    this.props.auth.login('/');\n  }\n\n   logout = async() => {\n    this.props.auth.logout('/');\n  }\n\n  render() {\n    if (this.state.authenticated === null) return null;\n\n    const mainContent = this.state.authenticated ?\n      (<div>\n          <p classNmae=\"lead\">You have entered Staff portal,<Link to=\"/staff\">click here</Link></p>\n          <button className=\"btn btn-light btn-lg\" onClick={this.logout}>Logout</button>\n      </div>) :(<div><p className=\"lead\">Sorry you do not have login access..</p>\n          <button className=\"btn btn-dark btn-lg\" onClick={this.login}>Login</button>\n</div>)\n      \n\n    return (\n      <div className=\"jumbotron\">\n        <h1 clssName=\"display-4\">Staff Portal</h1>\n        {mainContent}\n      </div>\n    );\n  }\n});\n","import React, { Component } from 'react'\n\nexport default class Staff extends Component {\n    state ={\n        currentUserName: '',\n        currentUserEmail:''\n    }\n    componentDidMount(){\n        const idToken = JSON.parse(localStorage.getItem('okta-token-storage'));\n        this.setState({\n            currentUserEmail:idToken.idToken.claims.email,\n            currentUserName: idToken.idToken.claims.name\n        });\n    }\n    render() {\n        \n        return (\n            <div>\n                <p> {this.state.currentUserName} E-mail is{this.state.currentUserEmail} </p>\n                 \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport OktaSignIn from '@okta/okta-signin-widget';\n//import '@okta/okta-signin-widget/dist/css/okta-sign-in.min.css';\n//import '@okta/okta-signin-widget/dist/css/okta-theme.css';\n\n class SignInWidget extends Component {\n  componentDidMount() {\n    const el = ReactDOM.findDOMNode(this);\n    this.widget = new OktaSignIn({\n      baseUrl: this.props.baseUrl,\n      logo:'logo.jpg',\n      authParams: {\n        pkce: true\n      }\n    });\n    this.widget.renderEl({el}, this.props.onSuccess, this.props.onError);\n  }\n\n  componentWillUnmount() {\n    this.widget.remove();\n  }\n\n  render() {\n    return <div />;\n  }\n};\nexport default SignInWidget;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport SignInWidget from './SigninWiget';\nimport { withAuth } from '@okta/okta-react';\n\nexport default withAuth(class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.onSuccess = this.onSuccess.bind(this);\n    this.onError = this.onError.bind(this);\n    this.state = {\n      authenticated: null\n    };\n    this.checkAuthentication();\n  }\n\n  async checkAuthentication() {\n    const authenticated = await this.props.auth.isAuthenticated();\n    if (authenticated !== this.state.authenticated) {\n      this.setState({ authenticated });\n    }\n  }\n\n  componentDidUpdate() {\n    this.checkAuthentication();\n  }\n\n  onSuccess = (res) => {\n    if (res.status === 'SUCCESS') {\n      return this.props.auth.redirect({\n        sessionToken: res.session.token\n      });\n   } else {\n    // The user can be in another authentication state that requires further action.\n    // For more information about these states, see:\n    //   https://github.com/okta/okta-signin-widget#rendereloptions-success-error\n    }\n  }\n\n  onError = (err) => {\n    console.log('error logging in', err);\n  }\n\n  render() {\n    if (this.state.authenticated === null) return null;\n    return this.state.authenticated ?\n      <Redirect to={{ pathname: '/' }}/> :\n      <SignInWidget\n        baseUrl={this.props.baseUrl}\n        onSuccess={this.onSuccess}\n        onError={this.onError}/>;\n  }\n});","import React from 'react';\nimport './App.css';\nimport Navbar from './components/layout/Navbar';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Security, SecureRoute, ImplicitCallback } from '@okta/okta-react';\nimport Home from './components/pages/Home';\nimport Staff from './components/pages/Staff';\nimport Login from './components/auth/Login';\nfunction onAuthRequired({history}){\n  history.push('/login');\n}\nfunction App() {\n  return (\n    <Router>\n      <Security issuer='https://dev-279783.okta.com/oauth2/default'\n                  clientId='0oa2f378ksHFaXRsH357'\n                  redirectUri={window.location.origin + '/implicit/callback'}\n                  onAuthRequired={onAuthRequired}\n                  pkce={true} >\n    <div className=\"App\">\n      <Navbar />\n      <div className='container'>\n      <Route path=\"/\" exact={true} component={Home}/>\n      <SecureRoute path=\"/staff\" exact={true} component={Staff}/>\n      <Route path='/login' render={() => <Login baseUrl='https://dev-279783.okta.com' />} />\n          <Route path='/implicit/callback' component={ImplicitCallback} />\n    </div>\n    </div>\n    </Security>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}